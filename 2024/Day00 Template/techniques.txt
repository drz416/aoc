Day 01
    p1: Using heaps (heapq) to compare lowest numbers in lists
    p1: Using Counter from collections, easily counts one of the lists for comparison
Day 02
    p1: Single loop with early breaks to avoid parsing every element in a report
    p2: Double nested loop with early breaks to avoid parsing every element, and also every variant combination
Day 03
    p1: Use regex's to find all the correctly spelled syntax, then perform calculations on results
    p2: First parse the entire string and pull out only part of string that is after do(), then use above method's regex to get mul commands only
Day 04
    p1: Scan the grid with nested loops x, y, looking for Xs and use a dictionary to index into directions
    p2: Scan the grid with nested loops x, y, looking for As and use a dictionary to index into directions
Day 05
    p1: Use itertools.combinations to cycle through all 2p combinations, and check if they break rules
    p2: For failed updates, use a modified bubble sorting algorithm to order the updates correctly
Day 06
    p1: Traversed a grid using current position as reference (list), and historic positions as dictinary tuples
    p2: Traversed a grid using current position as reference (list), and historic positions as dictinary tuples
Day 07
    p1: Use itertools.product to generate all operator combinations, call operator functions from a dict
    p2: As above but add another operator into the dictionary
Day 08
    p1: Calculate slope betweeb two antennas, project slope ahead and before to find nodes
    p2: As above, but project continuously along slopes until nodes leave the grid area
Day 09
    p1: Mutable array manipulation modeled with a list, using a front of list and back of list seek index
    p2: As above, but also keeping track of block lengths for replacement in blocks
Day 10
    p1: Used recursion to traverse grid, looking for trail-ends, stored trail-ends in set for unique ends
    p2: Same recurision as above, but stored trail-ends in a list were multiple paths are possible
Day 11
    p1: Part 1 solved using a linked list, each stone is an object, allowing inseration within link
    p2: This part has too many cycles generating over 200T objects, reduced stone duplication to cycles, made into algebra problem
Day 12
    p1: Setup Plots as object and Regions as objects housing Plots, using OOP style methods to perform checks and merges
    p2: Same as above, but needed to modify the method to use a rule of edge counting to count long edges
Day 13
    p1: Brute force was a trap, the solution was just solving a 2x2 matrix of the from Ax=b
    p2: Same as above, but b was increased by many orders, didn't impact the calculations
Day 14
    p1: Robots moved in straight line, used time * slop to determine final position
    p2: Easter egg: required visual inspection of robot movements until christmas tree was found
Day 15
    p1: Robots and boxed mapped using a list grid, movements done through recursive function
    p2: Same as above, except one of the cases in the recursion function calls 2 recursives, to check both sides of a box
Day 16
    p1: Created path objects that duplicate when they run into intersections, moved with a deque
    p2: TO COME BACK TO
Day 17
    p1: First part is straight forward, programming a computer reading a list of opcodes
    p2: Second part was non-trivial, I found someone else's algorithm that reverse engineered bitwise movements
Day 18
    p1: Created dijsktra's algorithm from scratch to calculate shortest path, anticipated it will be needed as a function for p2
    p2: Same as above except placed in a while loop, and incremeted the number of bytes that dropped at start
Day 19
    p1: Used a recursive function to calculate combinations, but do to high # of combinations, used memoization
    p2: Same as above, but needed to change the recursive function to return count of successes
Day 20
    p1:
    p2:
Day 21
    p1:
    p2:
Day 22
    p1:
    p2:
Day 23
    p1:
    p2:
Day 24
    p1:
    p2:
Day 25
    p1:
    p2: